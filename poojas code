#zeta=np.array([2, 2]) 
data=np.random.rand(20000,2)
z0=[]
z1=[]
z_values=[]
#w=np.random.rand(3)

for i in range(len(data)):
    z = NOR_perceptron_classifier(data[i],False) #square brackets means ur referring to the indices
    classification=int(z[0])
    z_values.append(classification)
    
    if classification==0:
        z0.append(data[i])
    else:
        z1.append(data[i])
z0=np.array(z0)
z1=np.array(z1)

pap=[0,1,1]
yap=[1,0,1]
w1=-2
w2=-2
b=1


print(z0.shape)
print(z1.shape)

xo=np.linspace(0,0.5,100)
yo=-(w1*xo+b)/w2

plt.figure(figsize=(8,6))

#if len(z0)>0:
plt.scatter(z0[:,0],z0[:,1], color='magenta', label='z=0')
#if len(z1)>0:
plt.scatter(z1[:,0],z1[:,1],color='cyan',label='z=1')
plt.scatter(pap, yap, color='purple', marker='*', label='Training Data: For z=0', s=500)
plt.scatter(0,0, color='yellow', marker='*', label='Training Data: For z=1', s=500)
if len(yo)>0:
    plt.plot(xo,yo, label='Decision Boundary', color='orange')
    
plt.xlabel('x coordinate')
plt.ylabel('y coordinate') 
plt.title('Classification of 20000 random pairs by NOR Perceptron')
plt.legend()
plt.show()

#z_valuesnew=np.array(z_values)
#z_valuesnew

#x=np.linspace(0,1,len(data)) #the length of the data is what is giving you an output
#z=z_valuesnew
#plt.scatter(x,z,label='?')
#plt.scatter(x,z2)
#plt.legend()
#plt.show()


